import java.io.*;
import java.util.*;

class Edge
{
    int v;
    int weight;
}

class Graph{
    
    int V;
    ArrayList<Edge> Edges[];
    Stack<Integer>stack=new Stack<Integer>();
    boolean visited[];
    int dist[];
	Graph(int v)
	{
	    V=v;
	    visited=new boolean[V];
	    Edges=new ArrayList[V];
	    for(int i=0;i<V;i++)
	    Edges[i]=new ArrayList<Edge>();
	    dist=new int[V];
	  
	 
	}
	
public void	AddEdge(int a,int b,int weight)
	{
	    Edge edge=new Edge();
	    edge.v=b;
	    edge.weight=weight;
	    Edges[a].add(edge);
	    
	}
	
	public Stack TopologicalSort()
	{
	    
	 for(int i=0;i<V;i++)
	 { 
	     if(visited[i]==false)
	     Topological(i);

	 }
	    
	    return stack;
	    
	}
	public void Topological(int v)
	{
	    visited[v]=true;

	    for(int i=0;i<Edges[v].size();i++)
	    {
	        int u=Edges[v].get(i).v;
	        if(visited[u]==false)
	        Topological(u);
	         
	    }
	    stack.push(v);
	}
	
void longestPath(int s)
	{
	    for(int i=0;i<V;i++)
	    {
	        dist[i]=-100000;
	    }
	    dist[s]=0;
	    
	    while(stack.empty()==false)
	    {
	        int u=stack.pop();
	       if(dist[u]!=-100000)
	     
	     {  
	         for(int i=0;i<Edges[u].size();i++)
	        {
	            if(dist[Edges[u].get(i).v]<dist[u]+Edges[u].get(i).weight)
	            {
	                dist[Edges[u].get(i).v]=dist[u]+Edges[u].get(i).weight;
	            }
	        }
	    }
	    }
	    for(int i=0;i<V;i++)
	    {
	        if(dist[i]==-100000)
	        System.out.println("INF");
	        else
	         System.out.println(dist[i]);
	    }
	    
	}
	
}
class Main
{
    public static void main(String args[])
    {
        Scanner scan = new Scanner(System.in);
        
        
        
        int n= scan.nextInt();
        Graph graph=new Graph(n);

        int e=scan.nextInt();
         
          for(int i=0;i<e;i++)
          {
             graph.AddEdge(scan.nextInt(),scan.nextInt(),scan.nextInt());
              
          }
          Stack stack=graph.TopologicalSort();
          
         graph.longestPath(1);
   }
        
    }
    
    
